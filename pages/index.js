import Head from 'next/head'
import Link from 'next/link'
import { sanityClient } from '../lib/sanity';
import { urlFor } from '../lib/sanity.js'
import recipe from '../sanitystudio-/schemas/recipe';

// Note: to communicate and pull the data from a content lake, we need to use some sort of query language, which will pull the data from the CMS using queries 
//        and we can destructure the required ones as per our requirement (to query data - here using GROQ query language for Sanity CMS)

// GROQ Query - to get recipe data from Sanity CMS 
const recipeQuery = `*[_type == "recipe"] {
  _id, 
  name, 
  slug,
  mainImage
  // mainImage{
  //   asset->{
  //     _id,
  //     url
  //   }
  // }
}`; 
// *[_type == "recipe"] - this will get us all recipe related data (destructuring the required ones)
// mainImage{
//   asset->{
//     _id, 
//     url
//   }
// }

export default function Home({ recipes }) {  

  return (

    <div>

      <Head>
        <title> The Kitchen App </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1> Welcome to The Kitchen </h1>

      <ul className='recipes-list'>
        {recipes?.length > 0 && recipes.map((recipe) => (
          <li key={recipe._id} className='recipe-card'>
            {/* redirecting to the custom path based on user clicks - (child route is the slug for the data name) */}
            <Link href={`/recipes/${recipe.slug.current}`} >
              <a>
                {/* <img src={recipe.mainImage} alt={recipe.name} /> */}
                <img src={urlFor(recipe?.mainImage).url()} />
                {/* {recipe.img && (
                  <img src={urlFor(recipe.mainImage).url()} alt={recipe.name} />
                )} */}
                {/* {recipe.img?.length > 0 ? (<img src={urlFor(recipe.mainImage).url()} alt={recipe.name} />) : ("Image not found")} */}
                {/* There's two ways we can render the image data here, one with our conventional mapping */}
                {/* And another from our external Url connection that we have created using "UrlFor" */}
                <span> {recipe.name} </span>
              </a>
            </Link>
          </li>
        ))}
      </ul>

    </div>
  )
}

// "getStaticProps" in NextJS behaves the same "useEffect" behaves in ReactJS" 
export async function getStaticProps () {
  // Since we're already quering for data using GROQ query - using the same query here to fecth the data through "getStaticProps"
  const recipes = await sanityClient.fetch(recipeQuery); 
  return {
    props: { recipes }
  }; 
}
